basePath: /api/v1
definitions:
  api.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  api.LoginRequest:
    properties:
      password:
        type: string
      tenant_id:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  api.LoginResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  api.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.CreateMessageRequestSwagger:
    description: Message creation request with structured payload
    properties:
      payload:
        $ref: '#/definitions/models.PayloadExample'
      tenant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    required:
    - payload
    - tenant_id
    type: object
  models.CreateTenantRequest:
    properties:
      name:
        type: string
      workers:
        type: integer
    required:
    - name
    type: object
  models.MessageListResponseSwagger:
    description: Paginated list of messages with structured payload
    properties:
      data:
        items:
          $ref: '#/definitions/models.MessageSwagger'
        type: array
      next_cursor:
        example: next_cursor_token
        type: string
    type: object
  models.MessageSwagger:
    description: Message object with structured payload
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      payload:
        $ref: '#/definitions/models.PayloadExample'
      tenant_id:
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  models.PayloadExample:
    description: Example payload structure (actual payload can be any valid JSON)
    properties:
      data:
        additionalProperties: {}
        type: object
      message:
        example: Hello World
        type: string
      timestamp:
        example: "2023-01-01T00:00:00Z"
        type: string
    type: object
  models.Tenant:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      workers:
        type: integer
    type: object
  models.UpdateTenantConcurrencyRequest:
    properties:
      workers:
        minimum: 1
        type: integer
    required:
    - workers
    type: object
  tenant.TenantStats:
    properties:
      queue_name:
        type: string
      tenant_id:
        type: string
      worker_count:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.swagger.io/support
  description: A Go application using RabbitMQ and PostgreSQL that handles multi-tenant
    messaging with dynamic consumer management, partitioned data storage, and configurable
    concurrency.
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Multi-Tenant Messaging System API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user credentials and return access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/api.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Authenticate user and get JWT tokens
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user (client should discard tokens)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Use refresh token to get a new access token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/api.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Refresh access token
      tags:
      - auth
  /messages:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all messages
      parameters:
      - description: Pagination cursor
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size (max 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageListResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List messages with cursor pagination
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Create a message and publish it to the tenant's queue
      parameters:
      - description: Message creation request
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.CreateMessageRequestSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.MessageSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create and publish a message
      tags:
      - messages
  /messages/{id}:
    get:
      consumes:
      - application/json
      description: Get message details by ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a message by ID
      tags:
      - messages
  /tenants:
    get:
      consumes:
      - application/json
      description: Get list of all tenants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Tenant'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get all tenants
      tags:
      - tenants
    post:
      consumes:
      - application/json
      description: Create a new tenant with auto-spawned consumer
      parameters:
      - description: Tenant creation request
        in: body
        name: tenant
        required: true
        schema:
          $ref: '#/definitions/models.CreateTenantRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Tenant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create a new tenant
      tags:
      - tenants
  /tenants/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a tenant and stop its consumer
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete a tenant
      tags:
      - tenants
    get:
      consumes:
      - application/json
      description: Get tenant details by ID
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tenant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get a tenant by ID
      tags:
      - tenants
  /tenants/{id}/config/concurrency:
    put:
      consumes:
      - application/json
      description: Update the number of workers for a tenant
      parameters:
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: string
      - description: Worker count update request
        in: body
        name: concurrency
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTenantConcurrencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update tenant worker concurrency
      tags:
      - tenants
  /tenants/{tenant_id}/messages:
    get:
      consumes:
      - application/json
      description: Get a paginated list of messages for a specific tenant
      parameters:
      - description: Tenant ID
        in: path
        name: tenant_id
        required: true
        type: string
      - description: Pagination cursor
        in: query
        name: cursor
        type: string
      - default: 20
        description: Page size (max 100)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.MessageListResponseSwagger'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: List messages for a specific tenant
      tags:
      - messages
  /tenants/stats:
    get:
      consumes:
      - application/json
      description: Get statistics for all active tenants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/tenant.TenantStats'
            type: object
      summary: Get tenant statistics
      tags:
      - tenants
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
